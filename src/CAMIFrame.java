//Author: Tanya Huisman
//Date: 10/6/2016
//Purpose: Main area of action, handles the frame and all its events
import java.awt.Frame;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Date;
import java.sql.SQLException;
import java.sql.Time;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.text.MaskFormatter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;

public class CAMIFrame extends javax.swing.JFrame {

static String username;
static String password;
CAMISQLDao camiDAO;
DateTimeFormatter df = DateTimeFormatter.ofPattern("MMM dd, yyyy");
char colHeader = 'A';
String colHeaderS;
DefaultTableModel tblModel;
 double total = 0;
    public CAMIFrame() 
    {
        //initialize and build the frame
        //force a login to access the program
        initComponents();
        
       LoginDialog login = new LoginDialog();
	username = login.getUserName();
	password = login.getPassword();
	boolean dbLoginFailed = true;
	while (dbLoginFailed){
            try {
                //make sure the login and password work for the database
                camiDAO = new CAMISQLDao(username, password);
              
		dbLoginFailed = false;
		} catch (SQLException e1) {
		dbLoginFailed = true;
                //if login and password are wrong show a message and allow them to try again
		JOptionPane.showMessageDialog(null, "Invalid username and/or password",
							"Login Error",
							JOptionPane.ERROR_MESSAGE);
		login = new LoginDialog();
		username = login.getUserName();
		password = login.getPassword();
		}
            setUpTable();
            
        } 
        
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jLayeredPane1 = new javax.swing.JLayeredPane();
        lblPhone = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        txtPhone = new javax.swing.JFormattedTextField(createFormatter("(###)###-####"));
        lblSucessFail = new javax.swing.JLabel();
        jScrollBar1 = new javax.swing.JScrollBar();
        tabPane = new javax.swing.JTabbedPane();
        pnlCustInfo = new javax.swing.JPanel();
        lblCustID = new javax.swing.JLabel();
        lblCustLastName = new javax.swing.JLabel();
        txtCustLastName = new javax.swing.JTextField();
        lblCustFirstName = new javax.swing.JLabel();
        txtCustFirstName = new javax.swing.JTextField();
        lblCustAddress = new javax.swing.JLabel();
        txtCustAddress = new javax.swing.JTextField();
        lblApartmentNum = new javax.swing.JLabel();
        txtApartmentNum = new javax.swing.JTextField();
        lblCity = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        lblState = new javax.swing.JLabel();
        lblZip = new javax.swing.JLabel();
        txtZip = new javax.swing.JTextField();
        lblCustPhone = new javax.swing.JLabel();
        btnCustInfoSave = new javax.swing.JButton();
        pnlDogInfo = new javax.swing.JPanel();
        lblCustDogName = new javax.swing.JLabel();
        txtCustDogName = new javax.swing.JTextField();
        lblDogBreed = new javax.swing.JLabel();
        cmbDogBreed = new javax.swing.JComboBox<>();
        lblDogBDay = new javax.swing.JLabel();
        jdcBDay = new com.toedter.calendar.JDateChooser();
        lblRabExp = new javax.swing.JLabel();
        jdcRabExp = new com.toedter.calendar.JDateChooser();
        lblDogID = new javax.swing.JLabel();
        lblDogCustID = new javax.swing.JLabel();
        cmbCustID = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAinstructions = new javax.swing.JTextArea();
        lblInstructions = new javax.swing.JLabel();
        btnDogSave = new javax.swing.JButton();
        cmbDogID = new javax.swing.JComboBox<>();
        btnNewDog = new javax.swing.JButton();
        btnDelDog = new javax.swing.JButton();
        cbDogBanned = new javax.swing.JCheckBox();
        btnNewCustomer = new javax.swing.JButton();
        btnDelCust = new javax.swing.JButton();
        txtCustID = new javax.swing.JLabel();
        txtCustPhone = new javax.swing.JFormattedTextField(createFormatter("(###)###-####"));
        txtState = new javax.swing.JFormattedTextField(createFormatter("UU"));
        cbCustBanned = new javax.swing.JCheckBox();
        pnlAppointments = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAppointments = new JTable(){
            public boolean isCellEditable(int rowIndex, int vColIndex) {
                return false;
            }};
            jdcApptDate = new com.toedter.calendar.JDateChooser();
            jLabel2 = new javax.swing.JLabel();
            jLabel3 = new javax.swing.JLabel();
            jLabel4 = new javax.swing.JLabel();
            jLabel5 = new javax.swing.JLabel();
            jLabel6 = new javax.swing.JLabel();
            lblOwnerLastName = new javax.swing.JLabel();
            lblOwnerFirstName = new javax.swing.JLabel();
            lblDogName = new javax.swing.JLabel();
            lblApptDogBreed = new javax.swing.JLabel();
            lblGroomPrice = new javax.swing.JLabel();
            jLabel1 = new javax.swing.JLabel();
            lblGroomer = new javax.swing.JLabel();
            btnCancelAppt = new javax.swing.JButton();
            btnCheckOut = new javax.swing.JButton();
            btnCheckIn = new javax.swing.JButton();
            jLabel7 = new javax.swing.JLabel();
            lblApptID = new javax.swing.JLabel();
            btnReschedule = new javax.swing.JButton();
            lblLogo = new javax.swing.JLabel();
            jScrollPane4 = new javax.swing.JScrollPane();
            lstSearchResults = new javax.swing.JTree();
            jMenuBar1 = new javax.swing.JMenuBar();
            jMenu1 = new javax.swing.JMenu();
            jMenuItem1 = new javax.swing.JMenuItem();
            jMenuItem2 = new javax.swing.JMenuItem();
            jmiSettings = new javax.swing.JMenuItem();
            jMenuItem3 = new javax.swing.JMenuItem();
            menuAdmin = new javax.swing.JMenu();
            jMenuItem5 = new javax.swing.JMenuItem();
            jMenu4 = new javax.swing.JMenu();
            mnuSalesReport = new javax.swing.JMenuItem();
            mnuCommReport = new javax.swing.JMenuItem();

            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
            setTitle("CAMI");
            addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    formMouseClicked(evt);
                }
            });
            addWindowListener(new java.awt.event.WindowAdapter() {
                public void windowActivated(java.awt.event.WindowEvent evt) {
                    formWindowActivated(evt);
                }
                public void windowOpened(java.awt.event.WindowEvent evt) {
                    formWindowOpened(evt);
                }
            });

            lblPhone.setText("Phone Number: ");

            org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, txtPhone, org.jdesktop.beansbinding.ObjectProperty.create(), lblPhone, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
            bindingGroup.addBinding(binding);

            btnSearch.setText("Search");
            btnSearch.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnSearchActionPerformed(evt);
                }
            });

            txtPhone.setColumns(13);
            txtPhone.setToolTipText("Enter a phone number to search for");
            txtPhone.addFocusListener(new java.awt.event.FocusAdapter() {
                public void focusGained(java.awt.event.FocusEvent evt) {
                    txtPhoneFocusGained(evt);
                }
            });

            jLayeredPane1.setLayer(lblPhone, javax.swing.JLayeredPane.DEFAULT_LAYER);
            jLayeredPane1.setLayer(btnSearch, javax.swing.JLayeredPane.DEFAULT_LAYER);
            jLayeredPane1.setLayer(txtPhone, javax.swing.JLayeredPane.DEFAULT_LAYER);
            jLayeredPane1.setLayer(lblSucessFail, javax.swing.JLayeredPane.DEFAULT_LAYER);

            javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
            jLayeredPane1.setLayout(jLayeredPane1Layout);
            jLayeredPane1Layout.setHorizontalGroup(
                jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jLayeredPane1Layout.createSequentialGroup()
                            .addGap(159, 159, 159)
                            .addComponent(btnSearch))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                            .addGap(24, 24, 24)
                            .addComponent(lblPhone)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                    .addGap(0, 57, Short.MAX_VALUE)
                    .addComponent(lblSucessFail, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(66, Short.MAX_VALUE))
            );
            jLayeredPane1Layout.setVerticalGroup(
                jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblPhone)
                        .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addComponent(lblSucessFail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(45, 45, 45)
                    .addComponent(btnSearch)
                    .addContainerGap())
            );

            tabPane.setToolTipText("");
            tabPane.addFocusListener(new java.awt.event.FocusAdapter() {
                public void focusGained(java.awt.event.FocusEvent evt) {
                    tabPaneFocusGained(evt);
                }
            });

            pnlCustInfo.setToolTipText("");

            lblCustID.setText("Customer ID");

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, txtCustID, org.jdesktop.beansbinding.ObjectProperty.create(), lblCustID, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
            bindingGroup.addBinding(binding);

            lblCustLastName.setText("Last Name: ");

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, txtCustLastName, org.jdesktop.beansbinding.ObjectProperty.create(), lblCustLastName, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
            bindingGroup.addBinding(binding);

            txtCustLastName.setToolTipText("Required");
            txtCustLastName.setFocusCycleRoot(true);
            txtCustLastName.setNextFocusableComponent(lblCustFirstName);

            lblCustFirstName.setText("First Name: ");

            txtCustFirstName.setToolTipText("Required");
            txtCustFirstName.setNextFocusableComponent(lblCustAddress);

            lblCustAddress.setText("Address: ");

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, txtCustAddress, org.jdesktop.beansbinding.ObjectProperty.create(), lblCustAddress, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
            bindingGroup.addBinding(binding);

            txtCustAddress.setToolTipText("Required");
            txtCustAddress.setNextFocusableComponent(txtApartmentNum);

            lblApartmentNum.setText("Apartment #: ");

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, txtApartmentNum, org.jdesktop.beansbinding.ObjectProperty.create(), lblApartmentNum, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
            bindingGroup.addBinding(binding);

            txtApartmentNum.setNextFocusableComponent(txtCity);

            lblCity.setText("City: ");

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, txtCity, org.jdesktop.beansbinding.ObjectProperty.create(), lblCity, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
            bindingGroup.addBinding(binding);

            txtCity.setToolTipText("Required");
            txtCity.setNextFocusableComponent(txtState);

            lblState.setText("State: ");

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, txtState, org.jdesktop.beansbinding.ObjectProperty.create(), lblState, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
            bindingGroup.addBinding(binding);

            lblZip.setText("ZIP:");

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, txtZip, org.jdesktop.beansbinding.ObjectProperty.create(), lblZip, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
            bindingGroup.addBinding(binding);

            txtZip.setToolTipText("Required");
            txtZip.setNextFocusableComponent(txtCustPhone);

            lblCustPhone.setText("Phone Number: ");

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, txtCustPhone, org.jdesktop.beansbinding.ObjectProperty.create(), lblCustPhone, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
            bindingGroup.addBinding(binding);

            btnCustInfoSave.setText("Save Customer");
            btnCustInfoSave.setToolTipText("Update information for a current customer");
            btnCustInfoSave.setNextFocusableComponent(btnDelCust);
            btnCustInfoSave.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnCustInfoSaveActionPerformed(evt);
                }
            });

            lblCustDogName.setText("Dog's Name: ");

            lblDogBreed.setText("Dog Breed: ");

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, cmbDogBreed, org.jdesktop.beansbinding.ObjectProperty.create(), lblDogBreed, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
            bindingGroup.addBinding(binding);

            lblDogBDay.setText("Birthdate: ");

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jdcBDay, org.jdesktop.beansbinding.ObjectProperty.create(), lblDogBDay, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
            bindingGroup.addBinding(binding);

            jdcBDay.setDateFormatString("MMM dd, yyyy");

            lblRabExp.setText("Rabies Vaccination Expiration Date: ");

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jdcRabExp, org.jdesktop.beansbinding.ObjectProperty.create(), lblRabExp, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
            bindingGroup.addBinding(binding);

            jdcRabExp.setDateFormatString("MMM dd, yyyy");

            lblDogID.setText("Dog ID");

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, cmbDogID, org.jdesktop.beansbinding.ObjectProperty.create(), lblDogID, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
            bindingGroup.addBinding(binding);

            lblDogCustID.setText("Owner ID");

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, cmbCustID, org.jdesktop.beansbinding.ObjectProperty.create(), lblDogCustID, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
            bindingGroup.addBinding(binding);

            cmbCustID.setModel(new javax.swing.DefaultComboBoxModel<>(new Integer[] { }));
            cmbCustID.addItemListener(new java.awt.event.ItemListener() {
                public void itemStateChanged(java.awt.event.ItemEvent evt) {
                    cmbCustIDItemStateChanged(evt);
                }
            });

            txtAinstructions.setColumns(20);
            txtAinstructions.setRows(5);
            jScrollPane3.setViewportView(txtAinstructions);

            lblInstructions.setText("Instructions: ");

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, txtAinstructions, org.jdesktop.beansbinding.ObjectProperty.create(), lblInstructions, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
            bindingGroup.addBinding(binding);

            btnDogSave.setText("Save Dog");
            btnDogSave.setToolTipText("Update a current dog in the system");
            btnDogSave.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnDogSaveActionPerformed(evt);
                }
            });

            cmbDogID.setModel(new javax.swing.DefaultComboBoxModel<>(new Integer[] { }));
            cmbDogID.addItemListener(new java.awt.event.ItemListener() {
                public void itemStateChanged(java.awt.event.ItemEvent evt) {
                    cmbDogIDItemStateChanged(evt);
                }
            });

            btnNewDog.setText("New Dog");
            btnNewDog.setToolTipText("Add a new dog to the system");
            btnNewDog.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnNewDogActionPerformed(evt);
                }
            });

            btnDelDog.setText("Delete Dog");
            btnDelDog.setToolTipText("Delete a current dog from the system");
            btnDelDog.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnDelDogActionPerformed(evt);
                }
            });

            cbDogBanned.setText("Dog Banned");
            cbDogBanned.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    cbDogBannedActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout pnlDogInfoLayout = new javax.swing.GroupLayout(pnlDogInfo);
            pnlDogInfo.setLayout(pnlDogInfoLayout);
            pnlDogInfoLayout.setHorizontalGroup(
                pnlDogInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlDogInfoLayout.createSequentialGroup()
                    .addGroup(pnlDogInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlDogInfoLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlDogInfoLayout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addComponent(lblInstructions)))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(pnlDogInfoLayout.createSequentialGroup()
                    .addGap(43, 43, 43)
                    .addGroup(pnlDogInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlDogInfoLayout.createSequentialGroup()
                            .addComponent(lblRabExp)
                            .addGap(18, 18, 18)
                            .addComponent(jdcRabExp, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnlDogInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlDogInfoLayout.createSequentialGroup()
                                .addComponent(lblDogBDay)
                                .addGap(18, 18, 18)
                                .addComponent(jdcBDay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(pnlDogInfoLayout.createSequentialGroup()
                                .addComponent(lblDogBreed)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbDogBreed, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlDogInfoLayout.createSequentialGroup()
                                .addComponent(lblCustDogName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCustDogName, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(lblDogID)
                        .addGroup(pnlDogInfoLayout.createSequentialGroup()
                            .addComponent(lblDogCustID)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(pnlDogInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cmbDogID, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cmbCustID, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlDogInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnDelDog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDogSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnNewDog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(127, 127, 127))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDogInfoLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(cbDogBanned)
                    .addGap(117, 117, 117))
            );
            pnlDogInfoLayout.setVerticalGroup(
                pnlDogInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlDogInfoLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(pnlDogInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblDogCustID)
                        .addComponent(cmbCustID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(8, 8, 8)
                    .addGroup(pnlDogInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlDogInfoLayout.createSequentialGroup()
                            .addGroup(pnlDogInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblDogID)
                                .addComponent(cmbDogID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(pnlDogInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(pnlDogInfoLayout.createSequentialGroup()
                                    .addGroup(pnlDogInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblCustDogName)
                                        .addComponent(txtCustDogName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(pnlDogInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblDogBreed)
                                        .addComponent(cmbDogBreed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(pnlDogInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblDogBDay)
                                        .addComponent(jdcBDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addComponent(lblRabExp))
                                .addComponent(jdcRabExp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(pnlDogInfoLayout.createSequentialGroup()
                            .addGap(11, 11, 11)
                            .addComponent(btnNewDog)
                            .addGap(18, 18, 18)
                            .addComponent(btnDogSave)
                            .addGap(18, 18, 18)
                            .addComponent(btnDelDog)))
                    .addGap(19, 19, 19)
                    .addComponent(cbDogBanned)
                    .addGap(4, 4, 4)
                    .addComponent(lblInstructions)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(104, 104, 104))
            );

            btnNewCustomer.setText("New Customer");
            btnNewCustomer.setToolTipText("Add a new customer to the system");
            btnNewCustomer.setNextFocusableComponent(btnCustInfoSave);
            btnNewCustomer.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnNewCustomerActionPerformed(evt);
                }
            });

            btnDelCust.setText("Delete Customer");
            btnDelCust.setToolTipText("Delete a customer from the system");
            btnDelCust.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnDelCustActionPerformed(evt);
                }
            });

            txtCustPhone.setToolTipText("Required, only enter numbers not ( or ) or -");
            txtCustPhone.setNextFocusableComponent(btnNewCustomer);

            txtState.setColumns(2);
            txtState.setToolTipText("Required Only enter 2 letter abbreviations IE: CA, TX, FL");
            txtState.setNextFocusableComponent(txtZip);

            cbCustBanned.setText("Customer Banned");
            cbCustBanned.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    cbCustBannedActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout pnlCustInfoLayout = new javax.swing.GroupLayout(pnlCustInfo);
            pnlCustInfo.setLayout(pnlCustInfoLayout);
            pnlCustInfoLayout.setHorizontalGroup(
                pnlCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlCustInfoLayout.createSequentialGroup()
                    .addGroup(pnlCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(pnlCustInfoLayout.createSequentialGroup()
                            .addGroup(pnlCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(pnlCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlCustInfoLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(lblCustPhone)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtCustPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlCustInfoLayout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addGroup(pnlCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(pnlCustInfoLayout.createSequentialGroup()
                                                .addComponent(lblCustFirstName)
                                                .addGap(18, 18, 18)
                                                .addComponent(txtCustFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(pnlCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlCustInfoLayout.createSequentialGroup()
                                                    .addComponent(lblCustLastName)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(txtCustLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(pnlCustInfoLayout.createSequentialGroup()
                                                    .addComponent(lblCustID)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(txtCustID, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(pnlCustInfoLayout.createSequentialGroup()
                                                .addComponent(lblCustAddress)
                                                .addGap(30, 30, 30)
                                                .addComponent(txtCustAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(pnlCustInfoLayout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addGroup(pnlCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblApartmentNum)
                                            .addGroup(pnlCustInfoLayout.createSequentialGroup()
                                                .addGap(28, 28, 28)
                                                .addGroup(pnlCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblState)
                                                    .addComponent(lblCity)
                                                    .addComponent(lblZip))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(pnlCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtApartmentNum, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(pnlCustInfoLayout.createSequentialGroup()
                                    .addGroup(pnlCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtZip, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(282, 282, 282)))
                            .addGroup(pnlCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(pnlCustInfoLayout.createSequentialGroup()
                                    .addGap(82, 82, 82)
                                    .addGroup(pnlCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(btnDelCust, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnCustInfoSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnNewCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(cbCustBanned, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(51, 51, 51))
                        .addComponent(pnlDogInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(16, 16, 16))
            );
            pnlCustInfoLayout.setVerticalGroup(
                pnlCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlCustInfoLayout.createSequentialGroup()
                    .addGroup(pnlCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlCustInfoLayout.createSequentialGroup()
                            .addGap(38, 38, 38)
                            .addGroup(pnlCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblCustID)
                                .addComponent(txtCustID, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(pnlCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblCustLastName)
                                .addComponent(txtCustLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(pnlCustInfoLayout.createSequentialGroup()
                            .addGap(42, 42, 42)
                            .addComponent(cbCustBanned)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(pnlCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblCustFirstName)
                        .addComponent(txtCustFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(pnlCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblCustAddress)
                        .addComponent(txtCustAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(pnlCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblApartmentNum)
                        .addComponent(txtApartmentNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlCustInfoLayout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(pnlCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblCity)
                                .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnNewCustomer))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(pnlCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblState)
                                .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(pnlCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblZip)
                                .addComponent(txtZip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(pnlCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnDelCust)
                                .addComponent(txtCustPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblCustPhone)))
                        .addGroup(pnlCustInfoLayout.createSequentialGroup()
                            .addGap(45, 45, 45)
                            .addComponent(btnCustInfoSave)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(pnlDogInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 138, Short.MAX_VALUE))
            );

            tabPane.addTab("Customer Information", null, pnlCustInfo, "View and manage customer information");

            pnlAppointments.setToolTipText("");

            tblAppointments.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {"8:00 am", null, null},
                    {"8:30 am", null, null},
                    {"9:00 am", null, null},
                    {"9:30 am", null, null},
                    {"10:00am", null, null},
                    {"10:30am", null, null},
                    {"11:00am", null, null},
                    {"1:00pm", null, null},
                    {"1:30pm", null, null},
                    {"2:00pm", null, null}
                },
                new String [] {
                    "Times", "B", "C"
                }
            ));
            tblAppointments.setToolTipText("Click only on the time slot that is under a groomer");
            tblAppointments.setCellSelectionEnabled(true);
            tblAppointments.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
            tblAppointments.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    tblAppointmentsMouseClicked(evt);
                }
            });
            jScrollPane2.setViewportView(tblAppointments);

            jdcApptDate.setDateFormatString("MMM dd, yyyy");
            jdcApptDate.setDateFormatString("MMM dd, yyyy");
            jdcApptDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                public void propertyChange(java.beans.PropertyChangeEvent evt) {
                    jdcApptDatePropertyChange(evt);
                }
            });

            jLabel2.setText("Owner's Last Name:");

            jLabel3.setText("Owner's First Name:");

            jLabel4.setText("Dog's Name:");

            jLabel5.setText("Dog's Breed:");

            jLabel6.setText("Price of Groom:");

            jLabel1.setText("Groomer: ");

            btnCancelAppt.setText("Cancel Appointment");
            btnCancelAppt.setToolTipText("Delete an appointment from the database");
            btnCancelAppt.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnCancelApptActionPerformed(evt);
                }
            });

            btnCheckOut.setText("Check Out");
            btnCheckOut.setToolTipText("Check a customer out, print receipt");
            btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnCheckOutActionPerformed(evt);
                }
            });

            btnCheckIn.setText("Check In");
            btnCheckIn.setToolTipText("Check a customer in, print release form");
            btnCheckIn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnCheckInActionPerformed(evt);
                }
            });

            jLabel7.setText("Appointment ID: ");

            btnReschedule.setText("Reschedule");
            btnReschedule.setToolTipText("Update an appointment to a different time");
            btnReschedule.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnRescheduleActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout pnlAppointmentsLayout = new javax.swing.GroupLayout(pnlAppointments);
            pnlAppointments.setLayout(pnlAppointmentsLayout);
            pnlAppointmentsLayout.setHorizontalGroup(
                pnlAppointmentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlAppointmentsLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jdcApptDate, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(59, 59, 59))
                .addGroup(pnlAppointmentsLayout.createSequentialGroup()
                    .addGap(30, 30, 30)
                    .addGroup(pnlAppointmentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlAppointmentsLayout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblOwnerFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnlAppointmentsLayout.createSequentialGroup()
                            .addGroup(pnlAppointmentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(pnlAppointmentsLayout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(42, 42, 42)
                                    .addComponent(lblGroomer, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(pnlAppointmentsLayout.createSequentialGroup()
                                    .addGroup(pnlAppointmentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel6))
                                    .addGap(28, 28, 28)
                                    .addGroup(pnlAppointmentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(pnlAppointmentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblApptDogBreed, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblDogName, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(lblGroomPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(pnlAppointmentsLayout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(lblOwnerLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(pnlAppointmentsLayout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addGap(32, 32, 32)
                                    .addComponent(lblApptID, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(174, 174, 174)
                            .addGroup(pnlAppointmentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnReschedule)
                                .addComponent(btnCheckIn)
                                .addComponent(btnCheckOut)
                                .addComponent(btnCancelAppt))))
                    .addContainerGap(160, Short.MAX_VALUE))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
            );
            pnlAppointmentsLayout.setVerticalGroup(
                pnlAppointmentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAppointmentsLayout.createSequentialGroup()
                    .addGap(17, 17, 17)
                    .addComponent(jdcApptDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlAppointmentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAppointmentsLayout.createSequentialGroup()
                            .addGap(321, 321, 321)
                            .addComponent(lblApptID, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnlAppointmentsLayout.createSequentialGroup()
                            .addGap(9, 9, 9)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlAppointmentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(pnlAppointmentsLayout.createSequentialGroup()
                                    .addGap(39, 39, 39)
                                    .addComponent(jLabel7))
                                .addGroup(pnlAppointmentsLayout.createSequentialGroup()
                                    .addGap(32, 32, 32)
                                    .addComponent(btnReschedule)))))
                    .addGap(18, 18, 18)
                    .addGroup(pnlAppointmentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(pnlAppointmentsLayout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(20, 20, 20)
                            .addComponent(jLabel3))
                        .addGroup(pnlAppointmentsLayout.createSequentialGroup()
                            .addComponent(lblGroomer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblOwnerFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(btnCancelAppt, javax.swing.GroupLayout.Alignment.LEADING))
                    .addGap(15, 15, 15)
                    .addGroup(pnlAppointmentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnCheckIn)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblOwnerLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlAppointmentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlAppointmentsLayout.createSequentialGroup()
                            .addGap(12, 12, 12)
                            .addComponent(jLabel4))
                        .addGroup(pnlAppointmentsLayout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(lblDogName, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btnCheckOut)
                    .addGap(24, 24, 24)
                    .addGroup(pnlAppointmentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel5)
                        .addComponent(lblApptDogBreed, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                    .addGroup(pnlAppointmentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblGroomPrice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(77, 77, 77))
            );

            tabPane.addTab("Appointments", null, pnlAppointments, "View and manage appointments");

            lblLogo.setFont(new java.awt.Font("Charlemagne Std", 1, 24)); // NOI18N
            lblLogo.setForeground(new java.awt.Color(0, 153, 204));
            lblLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logo.png"))); // NOI18N

            javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Customer");
            javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Dog1");
            treeNode1.add(treeNode2);
            treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Dog2");
            treeNode1.add(treeNode2);
            lstSearchResults.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
            lstSearchResults.setToolTipText("Select a dog here before clicking on an appointment slot");
            lstSearchResults.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    lstSearchResultsMouseClicked(evt);
                }
            });
            lstSearchResults.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
                public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                    lstSearchResultsValueChanged(evt);
                }
            });
            lstSearchResults.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
            jScrollPane4.setViewportView(lstSearchResults);

            jMenu1.setText("File");

            jMenuItem1.setText("Minimize");
            jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItem1ActionPerformed(evt);
                }
            });
            jMenu1.add(jMenuItem1);

            jMenuItem2.setText("Maximize");
            jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItem2ActionPerformed(evt);
                }
            });
            jMenu1.add(jMenuItem2);

            jmiSettings.setText("Settings");
            jmiSettings.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jmiSettingsActionPerformed(evt);
                }
            });
            jMenu1.add(jmiSettings);

            jMenuItem3.setText("Exit");
            jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItem3ActionPerformed(evt);
                }
            });
            jMenu1.add(jMenuItem3);

            jMenuBar1.add(jMenu1);

            menuAdmin.setText("View");
            menuAdmin.setToolTipText("View other windows");

            jMenuItem5.setText("Admin Window");
            jMenuItem5.setToolTipText("View the Admin Window");
            jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItem5ActionPerformed(evt);
                }
            });
            menuAdmin.add(jMenuItem5);

            jMenuBar1.add(menuAdmin);

            jMenu4.setText("Reports");

            mnuSalesReport.setText("Sales Report");
            mnuSalesReport.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    mnuSalesReportActionPerformed(evt);
                }
            });
            jMenu4.add(mnuSalesReport);

            mnuCommReport.setText("Payroll Report");
            mnuCommReport.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    mnuCommReportActionPerformed(evt);
                }
            });
            jMenu4.add(mnuCommReport);

            jMenuBar1.add(jMenu4);

            setJMenuBar(jMenuBar1);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(tabPane)
                    .addGap(2, 2, 2))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(92, 92, 92))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addContainerGap())))
                .addComponent(tabPane)
            );

            bindingGroup.bind();

            pack();
        }// </editor-fold>//GEN-END:initComponents
    public void setUpTable()
    {//Method to set up the table with enough columns for each groomer
        ArrayList<Employee> emps = (ArrayList<Employee>)camiDAO.findAllEmployeeType("Groomer");
        tblModel = new DefaultTableModel(10, emps.size() + 1);
        tblAppointments.setModel(tblModel);
        String[] headers = new String[emps.size() + 1];
        for(int i = 0; i < emps.size() + 1; i++)
        {
            colHeaderS = String.valueOf(colHeader);
            headers[i] = colHeaderS;
            colHeader ++;
        }
        tblModel.setColumnIdentifiers(headers);
        TableColumn col = tblAppointments.getColumn("A");
        col.setHeaderValue("Times");
        tblAppointments.setValueAt("8:00 AM", 0, 0);
        tblAppointments.setValueAt("8:30 AM", 1, 0);
        tblAppointments.setValueAt("9:00 AM", 2, 0);
        tblAppointments.setValueAt("9:30 AM", 3, 0);
        tblAppointments.setValueAt("10:00 AM", 4, 0);
        tblAppointments.setValueAt("10:30 AM", 5, 0);
        tblAppointments.setValueAt("11:00 AM", 6, 0);
        tblAppointments.setValueAt("1:00 PM", 7, 0);
        tblAppointments.setValueAt("1:30 PM", 8, 0);
        tblAppointments.setValueAt("2:00 PM", 9, 0);
        colHeader = 'B';
           emps.stream().forEach((Employee specificItem) -> {
            colHeaderS = String.valueOf(colHeader);
            TableColumn column = tblAppointments.getColumn(colHeaderS);
            column.setHeaderValue(specificItem.getEmpID() + ", " + specificItem.getFirstName());
            column.setIdentifier(specificItem.getEmpID());
            colHeader ++;
            });
           tblAppointments.getTableHeader().setReorderingAllowed(false);
    }
    public void PopulateOwnerID()
    {
        //method to fill the Owner ID combo box with all available Customer IDs
        ArrayList<Customer> customers = (ArrayList<Customer>)camiDAO.selectAllCustomers();
           cmbCustID.removeAllItems();
			for (Customer specificItem : customers){
				cmbCustID.addItem(specificItem.getCustID());}
    }
    
    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
 
     
    }//GEN-LAST:event_formWindowActivated
public void FillTableWithAppts(Calendar c)
    {   //method to fill the appointments table with appointmens for the day selected.
      
        Date date = new Date(c.getTimeInMillis());
        ArrayList<Appointment> appts = (ArrayList<Appointment>) camiDAO.findAppointments(date);
        appts.stream().forEach((specificItem)-> {
            int apptID = specificItem.getApptID();
            int dogID = specificItem.getDogID();
            Dog dog = camiDAO.displayDog(dogID);
            int dogB = dog.getDogBreed();
            String dogBreed = camiDAO.getDogBreedString(dogB);
            String dogName = dog.getDogName();
            String appointment = apptID + ", " + dogName + "/" + dogBreed;
            Time time = specificItem.getApptTime();
            int empID = specificItem.getEmpID();
            Employee emp = camiDAO.findEmployee(empID);
            String t = time.toString();
            int row;
            TableColumn col = tblAppointments.getColumn(empID);
            int column = col.getModelIndex();
            switch(t)
            {
                case "08:00:00": row = 0;
                break;
                case "08:30:00": row = 1;
                break;
                case "09:00:00": row = 2;
                break;
                case "09:30:00": row = 3;
                break;
                case "10:00:00": row = 4;
                break;
                case "10:30:00": row = 5;
                break;
                case "11:00:00": row = 6;
                break;
                case "13:00:00": row = 7;
                break;
                case "13:30:00": row = 8;
                break;
                case "14:00:00": row = 9;
                break;
                default: row = 0;
                break;
            }
            TableModel model = tblAppointments.getModel();
            model.setValueAt(appointment, row, column);
            
        });
    }
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
         //method to handle the search for a customer when the Search button is clicked
        String ph = txtPhone.getText(); 
        Boolean customerExists = false;
        DefaultTreeModel m = (DefaultTreeModel)lstSearchResults.getModel();
        DefaultMutableTreeNode name;
        Customer customer;
        try{
        customer = camiDAO.findCustomer(ph);
        String lName = customer.getLastName();
        String fName = customer.getFirstName();
        String custName = (lName + ", " + fName);
        name = new DefaultMutableTreeNode(custName);
        ArrayList<Dog> dogs = (ArrayList<Dog>)camiDAO.findDog(customer.getCustID());
        if(dogs.isEmpty())
         {
             cmbDogID.setSelectedItem(null);
             txtCustDogName.setText(null);
             jdcBDay.setCalendar(null);
             jdcRabExp.setCalendar(null);
             txtAinstructions.setText(null);
         }
         dogs.stream().forEach((specificItem) -> {
             name.add(new DefaultMutableTreeNode(specificItem.getDogName()));
            });
         
        if(customer == null)
            {
            throw new Exception();
            }
        
        
        m.setRoot(name);
        int id = customer.getCustID();
        String custID = Integer.toString(id);
         txtCustID.setText(custID);
         txtCustLastName.setText(customer.getLastName());
         txtCustFirstName.setText(customer.getFirstName());
         txtCustAddress.setText(customer.getAddress());
         txtApartmentNum.setText(customer.getApartment());
         txtCity.setText(customer.getCity());
         txtState.setText(customer.getState());
         int zip = customer.getZip();
         String z = Integer.toString(zip);
         txtZip.setText(z);
         txtCustPhone.setText(customer.getPhone());
         customerExists = true;
         cmbCustID.setSelectedItem(id);
         lblSucessFail.setText("");
         if(camiDAO.custIsBanned(id))
            cbCustBanned.setSelected(true);
         else
             cbCustBanned.setSelected(false);
        }catch(Exception e){
            customerExists = false;
        }
        if(customerExists == false)
        {
            lblSucessFail.setText("<html>No Such Phone Number exists</html>");
            DefaultMutableTreeNode nr = new DefaultMutableTreeNode("No Result");
            m.setRoot(nr);
        }
        lstSearchResults.setModel(m); 
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnNewCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewCustomerActionPerformed
        //method to insert a customer when New Customer button is clicked
        String custLName = txtCustLastName.getText();
        String custFName = txtCustFirstName.getText();
        String custAdd = txtCustAddress.getText();
        String custApt = txtApartmentNum.getText();
        String custCity = txtCity.getText();
        String custState = txtState.getText();
        String z = txtZip.getText();
        int zip = Integer.parseInt(z);
        String phone = txtCustPhone.getText();
        Customer customer = new Customer(custLName, custFName, custAdd, custApt, custCity, custState, zip, phone);
        try{
        camiDAO.insertCustomer(customer);
        lblSucessFail.setText("Customer Successfully Added");
        customer = camiDAO.findCustomer(phone);
        int id = customer.getCustID();
        String custID = Integer.toString(id);
        txtCustID.setText(custID);
        PopulateOwnerID();
        cmbCustID.setSelectedItem(id);
        }catch(Exception e)
        {
            lblSucessFail.setText("Invalid Input");
        }
    }//GEN-LAST:event_btnNewCustomerActionPerformed

    private void btnCustInfoSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCustInfoSaveActionPerformed
        //method to update customer information when the Save button is clicked
       //10/12/16 fixed an issue that did not allow customer information to be updated
        String custID = txtCustID.getText();
        int id = Integer.parseInt(custID);
        String custLName = txtCustLastName.getText();
        String custFName = txtCustFirstName.getText();
        String custAdd = txtCustAddress.getText();
        String custApt = txtApartmentNum.getText();
        String custCity = txtCity.getText();
        String custState = txtState.getText();
        String z = txtZip.getText();
        int zip = Integer.parseInt(z);
        String phone = txtCustPhone.getText();
        Customer customer = new Customer(id, custLName, custFName, custAdd, custApt, custCity, custState, zip, phone);
        try{
        camiDAO.updateCustomer(customer);
        lblSucessFail.setText("Customer Successfully Updated");
        }catch(Exception e)
        {
            lblSucessFail.setText("Invalid Input");
        }
    }//GEN-LAST:event_btnCustInfoSaveActionPerformed

    private void btnNewDogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewDogActionPerformed
        //method to insert a dog when the New Dog button is clicked
        String name = txtCustDogName.getText();
        String breed = cmbDogBreed.getSelectedItem().toString();
        int breedID = camiDAO.getDogBreedID(breed);
        String birDate = ((JTextField)jdcBDay.getDateEditor().getUiComponent()).getText();
        String rabDate = ((JTextField)jdcRabExp.getDateEditor().getUiComponent()).getText();
        LocalDate dateB = LocalDate.parse(birDate, df);
        LocalDate dateR = LocalDate.parse(rabDate, df);
        GregorianCalendar bDate = new GregorianCalendar(dateB.getYear(), dateB.getMonthValue(), dateB.getDayOfMonth());
        GregorianCalendar rDate = new GregorianCalendar(dateR.getYear(), dateR.getMonthValue(), dateR.getDayOfMonth());
        if(bDate.after(rDate))
        {
            lblSucessFail.setText("<html>Rabies Exp Date must come after Birthday</html>");
            
        }
        String inst = txtAinstructions.getText();
        String custID = cmbCustID.getSelectedItem().toString();
        int id = Integer.parseInt(custID);
        
        try{
            //10/12/16 added check to make sure rabies expiration date is after birthday
        
        Dog dog = new Dog( name, breedID, bDate, rDate, inst, id );
        camiDAO.insertDog(dog);
        lblSucessFail.setText("Dog Successfully Added");
        }catch(Exception e)
        {
            lblSucessFail.setText("Invalid Input");
        }
    }//GEN-LAST:event_btnNewDogActionPerformed

    private void btnDogSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDogSaveActionPerformed
        //method to update dog information when Save is clicked in the Dog panel
        //10/12/16 fixed an issue that did not allow a dog to be updated 
        String id = cmbDogID.getSelectedItem().toString();
        int dogID = Integer.parseInt(id);
        String name = txtCustDogName.getText();
        String breed = cmbDogBreed.getSelectedItem().toString();
        int breedID = camiDAO.getDogBreedID(breed);
        String birDate = ((JTextField)jdcBDay.getDateEditor().getUiComponent()).getText();
        String rabDate = ((JTextField)jdcRabExp.getDateEditor().getUiComponent()).getText();
        LocalDate dateB = LocalDate.parse(birDate, df);
        LocalDate dateR = LocalDate.parse(rabDate, df);
        GregorianCalendar bDate = new GregorianCalendar(dateB.getYear(), dateB.getMonthValue(), dateB.getDayOfMonth());
        GregorianCalendar rDate = new GregorianCalendar(dateR.getYear(), dateR.getMonthValue(), dateR.getDayOfMonth());
         if(bDate.after(rDate))
        {
            lblSucessFail.setText("<html>Rabies Exp Date must come after Birthday</html>");
            
        }
        String inst = txtAinstructions.getText();
        String cID = cmbCustID.getSelectedItem().toString();
        int custID = Integer.parseInt(cID);
        
        try{
           
           
        Dog dog = new Dog(dogID, name, breedID, bDate, rDate, inst, custID );
        camiDAO.updateDog(dog);
        lblSucessFail.setText("Dog Sucessfully Updated");
        }catch(Exception e)
        {
            lblSucessFail.setText("Invalid Input");
        }
    }//GEN-LAST:event_btnDogSaveActionPerformed

    private void btnDelCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelCustActionPerformed
        //method to delete a customer when the Delete Customer button is clicked
        String id = txtCustID.getText();
        int custID = Integer.parseInt(id);
        try{
        camiDAO.deleteCustomer(custID);
        lblSucessFail.setText("Customer Successfully Deleted");
        txtCustID.setText(null);
        txtCustFirstName.setText(null);
        txtCustLastName.setText(null);
        txtCustAddress.setText(null);
        txtApartmentNum.setText(null);
        txtCity.setText(null);
        txtState.setText(null);
        txtZip.setText(null);
        txtPhone.setText(null);
        PopulateOwnerID();
        }catch(Exception e)
        {
            lblSucessFail.setText("Invalid Input");
        }
    }//GEN-LAST:event_btnDelCustActionPerformed

    private void btnDelDogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelDogActionPerformed
        //method to delete a dog when the Delete Dog button is clicked
        String id = cmbDogID.getSelectedItem().toString();
        int dogID = Integer.parseInt(id);
        try{
        camiDAO.deleteDog(dogID);
        lblSucessFail.setText("Dog Successfully Deleted");
        txtCustDogName.setText("");
        jdcBDay.setCalendar(null);
        jdcRabExp.setCalendar(null);
        }catch(Exception e)
        {
            lblSucessFail.setText("Invalid Input");
        }
    }//GEN-LAST:event_btnDelDogActionPerformed

    private void cmbCustIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCustIDItemStateChanged
        //method to fill the DogID combo box with all dogs belonging to the selected customer
        if(evt.getStateChange() == java.awt.event.ItemEvent.SELECTED)
        {
        cmbDogID.removeAllItems();
         int id = (Integer)cmbCustID.getSelectedItem();
       ArrayList<Dog> dogs = (ArrayList<Dog>)camiDAO.findDog(id);
         dogs.stream().forEach((specificItem) -> {
             cmbDogID.addItem(specificItem.getDogID());
            });
        }
    }//GEN-LAST:event_cmbCustIDItemStateChanged

    private void cmbDogIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbDogIDItemStateChanged
       //method to fill all fields with a dog's information when that dog ID is selected from the list
        if(evt.getStateChange() == java.awt.event.ItemEvent.SELECTED)
       {
        int id = (Integer)cmbDogID.getSelectedItem();
        int breedID;
       Dog dog = camiDAO.displayDog(id);
       breedID = dog.getDogBreed();
       txtCustDogName.setText(dog.getDogName());
       cmbDogBreed.setSelectedItem(camiDAO.getDogBreedString(breedID));
       jdcBDay.setCalendar(dog.getBDay());
       jdcRabExp.setCalendar(dog.getRabExp());
       txtAinstructions.setText(dog.getInstructions());
       if(camiDAO.dogIsBanned(id))
           cbDogBanned.setSelected(true);
       else
           cbDogBanned.setSelected(false);
       }
       
    }//GEN-LAST:event_cmbDogIDItemStateChanged

    private void tabPaneFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tabPaneFocusGained
         //method to add all available breeds to the Breed drop down list when the Customer Information Tab is clicked
        ArrayList<Pricing> breeds = (ArrayList<Pricing>)camiDAO.selectAllBreeds();
                        for (Pricing specificItem: breeds){
                                cmbDogBreed.addItem(specificItem.getBreed());}
    }//GEN-LAST:event_tabPaneFocusGained

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        //method to clear the success or failure label
        lblSucessFail.setText("");
    }//GEN-LAST:event_formMouseClicked

    private void txtPhoneFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPhoneFocusGained
       //method to clear the phone field if the user clicks on it to make it easier to search for another number
        txtPhone.setText(null);
    }//GEN-LAST:event_txtPhoneFocusGained

    private void lstSearchResultsValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_lstSearchResultsValueChanged
    //method to fill all information fields when a dog is selected from the tree 
        if(lstSearchResults.isFocusOwner())
    {
        DefaultMutableTreeNode selected = (DefaultMutableTreeNode)lstSearchResults.getLastSelectedPathComponent();
        if(selected.isLeaf())
        {
            String dogName = selected.getUserObject().toString();
            if(txtCustID.getText().isEmpty())
            {
                lblSucessFail.setText("Search for a customer first");
            }
            else
            {
                int custID = Integer.parseInt(txtCustID.getText());
                Dog dog = camiDAO.findDogFromList(custID, dogName);
                int breedID = dog.getDogBreed();
                int dogID = dog.getDogID();
                cmbDogID.setSelectedItem(dogID);
                txtCustDogName.setText(dog.getDogName());
                cmbDogBreed.setSelectedItem(camiDAO.getDogBreedString(breedID));
                jdcBDay.setCalendar(dog.getBDay());
                jdcRabExp.setCalendar(dog.getRabExp());
                txtAinstructions.setText(dog.getInstructions());
                if(camiDAO.dogIsBanned(dogID))
                    cbDogBanned.setSelected(true);
                else
                    cbDogBanned.setSelected(false);
            }
        }
    }
    }//GEN-LAST:event_lstSearchResultsValueChanged

    private void tblAppointmentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAppointmentsMouseClicked
       //method to make an appointment
        int column = tblAppointments.getSelectedColumn();
        if(column == 0)
        {
            lblSucessFail.setText("<html>That is an invalid appointment slot</html>");
        }
        else
        {
            TableColumn selectedColumn = tblAppointments.getColumnModel().getColumn(column);
            int row = tblAppointments.getSelectedRow();
            Object value = tblAppointments.getModel().getValueAt(row, column);
            if(value == null)
            {
                String dogName = txtCustDogName.getText();
                if(dogName.equals(""))
                {
                     lblSucessFail.setText("<html>Please search for a customer <br>and select a dog first</html>");
                }
                else
                {
                    int custID = Integer.parseInt(cmbCustID.getSelectedItem().toString());
                    int empID = Integer.parseInt(selectedColumn.getIdentifier().toString());
                    int dogID = Integer.parseInt(cmbDogID.getSelectedItem().toString());
                    if(camiDAO.dogIsBanned(dogID) || camiDAO.custIsBanned(custID))
                        lblSucessFail.setText("This dog cannot be groomed here");
                    else
                    {
                    String appDate = ((JTextField)jdcApptDate.getDateEditor().getUiComponent()).getText();
                    LocalDate date = LocalDate.parse(appDate, df);
                    GregorianCalendar apptDate = new GregorianCalendar(date.getYear(), date.getMonthValue(), date.getDayOfMonth());
                    Time time;
                    String t;
                    Appointment appt;
                    switch (row)
                    {
                        case 0: t = "08:00:00";
                        break;
                        case 1: t = "08:30:00";
                        break;
                        case 2: t = "09:00:00";
                        break;
                        case 3: t = "09:30:00";
                        break;
                        case 4: t = "10:00:00";
                        break;
                        case 5: t = "10:30:00";
                        break;
                        case 6: t = "11:00:00";
                        break;
                        case 7: t = "13:00:00";
                        break;
                        case 8: t = "13:30:00";
                        break;
                        case 9: t = "14:00:00";
                        break;
                        default: t = "00:00:00";
                        break;
                    }
                time = Time.valueOf(t);
                appt = new Appointment(empID, dogID, apptDate, time);
                camiDAO.insertAppointment(appt);
                FillTableWithAppts(apptDate);
                value = tblAppointments.getModel().getValueAt(row, column);
                fillInfo(value);
                    }
                }
            }
            else
            {
                fillInfo(value);
      
            }
        }
    }//GEN-LAST:event_tblAppointmentsMouseClicked
public static void clearTable(JTable table) {
   for (int i = 0; i < table.getRowCount(); i++)
      for(int j = 1; j < table.getColumnCount(); j++) {
          table.setValueAt(null, i, j);
      }
   }

    private void jdcApptDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jdcApptDatePropertyChange
        //method to update the table if a different date is chosen
        updateTable();
        
    }//GEN-LAST:event_jdcApptDatePropertyChange

    private void btnCancelApptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelApptActionPerformed
        //method to delete an appointment
        String id = lblApptID.getText();
        int apptID = Integer.parseInt(id);
        camiDAO.deleteAppointment(apptID);
        updateTable();
        clearApptFields();
        
    }//GEN-LAST:event_btnCancelApptActionPerformed

    private void btnCheckInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckInActionPerformed
        //Print check-in signature sheet
        String apptID = lblApptID.getText();
        
        
        if(!apptID.equals(""))
        {
             String OwnerFName = txtCustFirstName.getText();
             String OwnerLName = txtCustLastName.getText();
             String Phone = txtCustPhone.getText();
             String DogName = txtCustDogName.getText();
             String DogBreed = cmbDogBreed.getSelectedItem().toString();
             int dbID = camiDAO.getDogBreedID(DogBreed);
             LocalDate today = LocalDate.parse(((JTextField)jdcApptDate.getDateEditor().getUiComponent()).getText(), df);
             String date = today.toString();
             Pricing price = camiDAO.findPrice(dbID);
             double pr = price.getPrice();
             String Price = DecimalFormat.getCurrencyInstance().format(pr);
             String instructions = txtAinstructions.getText();
           
            try {
                File newfile = new File("newReleaseForm.html");
                FileWriter fw = new FileWriter(newfile);
                Scanner sc = new Scanner(CAMIFrame.class.getResourceAsStream("/ReleaseForm.html"));
                while(sc.hasNextLine())
                {
                    String relform = sc.nextLine();
                    relform = relform.replace("%firstName", OwnerFName);
                    relform = relform.replace("%lastname", OwnerLName);
                    relform = relform.replace("%phone", Phone);
                    relform = relform.replace("%date", date);
                    relform = relform.replace("%dogName", DogName);
                    relform = relform.replace("%breed", DogBreed);
                    relform = relform.replace("%price", Price);
                    relform = relform.replace("%grooming", instructions);
                    fw.write(relform);
                }
                fw.close();
                sc.close();
                lblSucessFail.setText("File Created");
         
                
            } catch (FileNotFoundException ex) {
                lblSucessFail.setText("File Not Found");
            } catch (IOException ex) {
                Logger.getLogger(CAMIFrame.class.getName()).log(Level.SEVERE, null, ex);
            } 
        }
 
        
        
        
        
    }//GEN-LAST:event_btnCheckInActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        //Print receipt and store transaction.Also add to the employee sales, commission and total sales.
        String apptID = lblApptID.getText();
       
        if(!apptID.equals(""))
        {
            
             String OwnerFName = txtCustFirstName.getText();
             String OwnerLName = txtCustLastName.getText();
             String DogName = txtCustDogName.getText();
             int DogID = Integer.parseInt(cmbDogID.getSelectedItem().toString());
             String DogBreed = cmbDogBreed.getSelectedItem().toString();
             String CustID = cmbCustID.getSelectedItem().toString();
             int cID = Integer.parseInt(CustID);
             LocalDate today = LocalDate.parse(((JTextField)jdcApptDate.getDateEditor().getUiComponent()).getText(), df);
             String date = today.toString();
             int dbID = camiDAO.getDogBreedID(DogBreed);
             Pricing price = camiDAO.findPrice(dbID);
             double pr = price.getPrice();
             String Price = DecimalFormat.getCurrencyInstance().format(pr);
             int column = tblAppointments.getSelectedColumn();
             TableColumn col = tblAppointments.getColumnModel().getColumn(column);
             int EmpID = Integer.parseInt(col.getIdentifier().toString());
             Employee emp = camiDAO.findEmployee(EmpID);
             Transaction trans = new Transaction(EmpID, DogID, cID, pr);
             camiDAO.insertTrans(trans);
             double sales = emp.getSales();
             double tSales = emp.getTotalSales();
             double commRate = emp.getCommPercent();
             double comm = emp.getCommission();
             sales = sales + pr;
             comm = sales * commRate;
             tSales = tSales + pr;
             emp.setSales(sales);
             emp.setTotalSales(tSales);
             emp.setCommission(comm);
             camiDAO.updateEmployee(emp);
             
             String Groomer = emp.getFirstName();
             int transID = camiDAO.getTransID();
             String TransID = Integer.toString(transID);
           
            try {
                File newfile = new File("newReceipt.html");
                FileWriter fw = new FileWriter(newfile);
                Scanner sc = new Scanner(CAMIFrame.class.getResourceAsStream("/Receipt.html"));
                while(sc.hasNextLine())
                {
                    String relform = sc.nextLine();
                    relform = relform.replace("%TransID", TransID);
                    relform = relform.replace("%CustID", CustID);
                    relform = relform.replace("%firstName", OwnerFName);
                    relform = relform.replace("%lastname", OwnerLName);
                    relform = relform.replace("%DogName", DogName);
                    relform = relform.replace("%Groomer", Groomer);
                    relform = relform.replace("%date", date);
                    relform = relform.replace("%Breed", DogBreed);
                    relform = relform.replace("%price", Price);
                    fw.write(relform);
                }
                fw.close();
                sc.close();
                lblSucessFail.setText("File Created");
         
                
            } catch (FileNotFoundException ex) {
                lblSucessFail.setText("File Not Found");
            } catch (IOException ex) {
                Logger.getLogger(CAMIFrame.class.getName()).log(Level.SEVERE, null, ex);
            } 
        }
 
    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void btnRescheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRescheduleActionPerformed
     //method to open a new frame with a table to reschedule an appointment. Added 11/15/16
        RescheduleFrame rf = new RescheduleFrame();
        rf.setVisible(true);
        
        
     
        
    }//GEN-LAST:event_btnRescheduleActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
       //Method to open a new Admin Window for employee management
        AdminWindow aw = new AdminWindow();
       aw.setVisible(true);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void lstSearchResultsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstSearchResultsMouseClicked
       //method to fill all information fields when a dog is selected from the tree 
        if(!lstSearchResults.isSelectionEmpty())
    {
        DefaultMutableTreeNode selected = (DefaultMutableTreeNode)lstSearchResults.getLastSelectedPathComponent();
        if(selected.isLeaf())
        {
            String dogName = selected.getUserObject().toString();
            if(txtCustID.getText().isEmpty())
            {
                lblSucessFail.setText("Search for a customer first");
            }
            else
            {
                int custID = Integer.parseInt(txtCustID.getText());
                Dog dog = camiDAO.findDogFromList(custID, dogName);
                int breedID = dog.getDogBreed();
                int dogID = dog.getDogID();
                cmbDogID.setSelectedItem(dogID);
                txtCustDogName.setText(dog.getDogName());
                cmbDogBreed.setSelectedItem(camiDAO.getDogBreedString(breedID));
                jdcBDay.setCalendar(dog.getBDay());
                jdcRabExp.setCalendar(dog.getRabExp());
                txtAinstructions.setText(dog.getInstructions());
                if(camiDAO.dogIsBanned(dogID))
                    cbDogBanned.setSelected(true);
                else
                    cbDogBanned.setSelected(false);
            }
        }
    }
            
    }//GEN-LAST:event_lstSearchResultsMouseClicked

    private void cbCustBannedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCustBannedActionPerformed
        //method to ban or unban a customer. Added 11/16/16
        String id = txtCustID.getText();
        int custID = Integer.parseInt(id);
        if(cbCustBanned.isSelected())
        {
            camiDAO.banCustomer(custID);
        }
        else
        {
            camiDAO.unbanCustomer(custID);
        }
    }//GEN-LAST:event_cbCustBannedActionPerformed

    private void cbDogBannedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDogBannedActionPerformed
        //method to ban or unban a dog. Added 11/16/16
        String id = cmbDogID.getSelectedItem().toString();
        int dogID = Integer.parseInt(id);
        if(cbDogBanned.isSelected())
        {
            camiDAO.banDog(dogID);
        }
        else
        {
            camiDAO.unbanDog(dogID);
        }
    }//GEN-LAST:event_cbDogBannedActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
     //method to set up the frame when CAMI is first loaded up
           PopulateOwnerID();
           txtCustDogName.setText(null);
           jdcBDay.setCalendar(null);
           jdcRabExp.setCalendar(null);
           txtAinstructions.setText(null);
           java.util.Date rightnow = new java.util.Date();
           jdcApptDate.setDate(rightnow);
           
            FillTableWithAppts(jdcApptDate.getCalendar());
    }//GEN-LAST:event_formWindowOpened

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // minimize the frame
        this.setState(Frame.ICONIFIED);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        //maximize the frame
        this.setExtendedState(MAXIMIZED_BOTH);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // Exit the program
        System.exit(0);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jmiSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSettingsActionPerformed
        // Open the settings option window
      SettingsWindow sw = new SettingsWindow();
      sw.setVisible(true);
    }//GEN-LAST:event_jmiSettingsActionPerformed

    private void mnuCommReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCommReportActionPerformed
        //Generate Commission Report
        ArrayList<Employee> empsComm = (ArrayList<Employee>)camiDAO.findAllEmployeePayType("Commission");
        try {
                File newfile = new File("PayrollReport.html");
                FileWriter fw = new FileWriter(newfile);
                BufferedWriter bw = new BufferedWriter(fw);
                bw.write("<!DOCTYPE html>");
                bw.newLine();
                bw.write("<html lang=\"en\">");
                bw.newLine();
                bw.write("<head>\n" +
"		<title>Payroll Report</title>\n" +
"		<meta charset=\"UTF-8\">\n" +
"		<meta name=\"author\" content=\"Tanya Huisman\">\n" +
"		<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n" +
"		<meta name=\"description\" content=\"Payroll Report for Grooming Salon\">\n" +
"	<style>\n" +
"	textarea {width: 100%;\n" +
"			  height: 10%;}\n" +
"	body {position: center;\n" +
"		 width: 40%;\n" +
"		height: 100%;}\n" +
"	div {clear:right;}\n" +
"	</style>	\n" +
"	</head>");
                bw.newLine();
                bw.write("<body>\n" +
"	<div>\n" +
"		<header>\n" +
"		<img src=\"logo.png\" alt=\"Company Logo\"/>\n" +
"		</header>");
                bw.newLine();
                bw.write("<main>");
                bw.newLine();
                bw.write("<h1>Commission Report</h1>\n");
                bw.write("<table border=1>\n <tr><th>Employee ID</th><th>Employee Name</th><th>Sales</th><th>Commission</th></tr>");
                bw.newLine();
                empsComm.stream().forEach((specificItem) -> {
                    try {
                        bw.write("<tr><td>" + specificItem.getEmpID() +
                                "</td><td>" + specificItem.getLastName() + ", " + specificItem.getFirstName() +
                                "</td><td>" + specificItem.getSales() +
                                "</td><td>" + specificItem.getCommission() + "</td></tr>");
                    } catch (IOException ex) {
                        Logger.getLogger(CAMIFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    }); 
                bw.newLine();
                bw.write("</table>");
                bw.newLine();
                bw.write("<h1>Salary Report</h1>\n");
                bw.write("<table border=1>\n <tr><th>Employee ID</th><th>Employee Name</th><th>Salary</th><th>Pay per Week</th></tr>");
                ArrayList<Employee> empsSal = (ArrayList<Employee>)camiDAO.findAllEmployeePayType("Salary");
                empsSal.stream().forEach((specificItem) -> {
                    try {
                        double pay = specificItem.getSalary()/ 52;
                        bw.write("<tr><td>" + specificItem.getEmpID() +
                                "</td><td>" + specificItem.getLastName() + ", " + specificItem.getFirstName() +
                                "</td><td>" + specificItem.getSalary() +
                                "</td><td>" + pay + "</td></tr>");
                    } catch (IOException ex) {
                        Logger.getLogger(CAMIFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    }); 
                bw.write("</table>");
                bw.newLine();
                bw.write("<h1>Hourly Wage Report</h1>\n");
                bw.write("<table border=1>\n <tr><th>Employee ID</th><th>Employee Name</th><th>Hourly Rate</th><th>Hours Worked</th><th>Pay</th></tr>");
                ArrayList<Employee> empsHrly = (ArrayList<Employee>)camiDAO.findAllEmployeePayType("Hourly");
                empsHrly.stream().forEach((specificItem) -> {
                    try {
                        double pay = specificItem.getHrlyPay() * 40;
                        bw.write("<tr><td>" + specificItem.getEmpID() +
                                "</td><td>" + specificItem.getLastName() + ", " + specificItem.getFirstName() +
                                "</td><td>" + specificItem.getHrlyPay() +
                                "</td><td>" + 40 +
                                "</td><td>" + pay + "</td></tr>");
                    } catch (IOException ex) {
                        Logger.getLogger(CAMIFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    }); 
                bw.write("</table>");
                bw.write("</main> \n"+
"	</div>	\n" +
"	</body>\n" +
"	</html>");
                bw.close();
                
                lblSucessFail.setText("Payroll Report Created");
                
            } catch (FileNotFoundException ex) {
                lblSucessFail.setText("File Not Found");
            } catch (IOException ex) {
                Logger.getLogger(CAMIFrame.class.getName()).log(Level.SEVERE, null, ex);
            } 
        
    }//GEN-LAST:event_mnuCommReportActionPerformed

    private void mnuSalesReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSalesReportActionPerformed
        //Generate Sales Report
        
        ArrayList<Transaction> trans = (ArrayList<Transaction>)camiDAO.selectAllTrans();
        try {
                File newfile = new File("SalesReport.html");
                FileWriter fw = new FileWriter(newfile);
                BufferedWriter bw = new BufferedWriter(fw);
                bw.write("<!DOCTYPE html>");
                bw.newLine();
                bw.write("<html lang=\"en\">");
                bw.newLine();
                bw.write("<head>\n" +
"		<title>Sales Report</title>\n" +
"		<meta charset=\"UTF-8\">\n" +
"		<meta name=\"author\" content=\"Tanya Huisman\">\n" +
"		<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n" +
"		<meta name=\"description\" content=\"Release Form for Grooming Salon\">\n" +
"	<style>\n" +
"	textarea {width: 100%;\n" +
"			  height: 10%;}\n" +
"	body {position: center;\n" +
"		 width: 40%;\n" +
"		height: 100%;}\n" +
"	div {clear:right;}\n" +
"	</style>	\n" +
"	</head>");
                bw.newLine();
                bw.write("<body>\n" +
"	<div>\n" +
"		<header>\n" +
"		<img src=\"logo.png\" alt=\"Company Logo\"/>\n" +
"		</header>");
                bw.newLine();
                bw.write("<main>");
                bw.newLine();
                bw.write("<h1>Sales Report</h1>\n");
                bw.write("<table border=1>\n <tr><th>Transaction ID</th>"
                        + "<th>Employee ID</th>"
                        + "<th>Dog ID</th>"
                        + "<th>Customer ID</th>"
                        + "<th>Price</th></tr>");
                bw.newLine();
               
                trans.stream().forEach((Transaction specificItem) -> {
                   
                    try {
                        total+= specificItem.getPrice();
                       
                        bw.write("<tr><td>" + specificItem.getTranID() +
                                "</td><td>" + specificItem.getEmpID() +
                                "</td><td>" + specificItem.getDogID()+
                                "</td><td>" + specificItem.getCustID() +
                                "</td><td>" + specificItem.getPrice() + "</td></tr>");
                    } catch (IOException ex) {
                        Logger.getLogger(CAMIFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    }); 
                bw.newLine();
                bw.write("<tr><td> Total Sales: </td><td>" + total + "</td></tr>\n");
                bw.write("</table>");
                bw.newLine();
                bw.write("</main> \n"+
"	</div>	\n" +
"	</body>\n" +
"	</html>");
                bw.close();
                lblSucessFail.setText("Sales Report Created");
                
                
                
            } catch (FileNotFoundException ex) {
                lblSucessFail.setText("File Not Found");
            } catch (IOException ex) {
                Logger.getLogger(CAMIFrame.class.getName()).log(Level.SEVERE, null, ex);
            } 
    }//GEN-LAST:event_mnuSalesReportActionPerformed
    public void updateTable()
    {
        //method to update the table after any changes have been made
        String appDate = ((JTextField)jdcApptDate.getDateEditor().getUiComponent()).getText();
        if(!appDate.isEmpty())
        {
        clearTable(tblAppointments);
        LocalDate date = LocalDate.parse(appDate, df);
        GregorianCalendar apptDate = new GregorianCalendar(date.getYear(), date.getMonthValue(), date.getDayOfMonth());
        FillTableWithAppts(apptDate);
        }
    }
    protected MaskFormatter createFormatter(String s) 
    {
        //method to create a mask that allows only the specified format and automatically adjusts input as needed
    MaskFormatter formatter = null;
    try {
        formatter = new MaskFormatter(s);
    } catch (java.text.ParseException exc) {
        System.err.println("formatter is bad: " + exc.getMessage());
        System.exit(-1);
    }
    return formatter;
    }
    public void fillInfo(Object value)
    {
        //method to fill the information textboxes for an appointment
        Appointment appt;
        String result = value.toString();
        String[] results = result.split(",");
        int apptID = Integer.parseInt(results[0]);
        String[] results2 = results[1].split("/");
        String dogName = results2[0];
        String dogBreed = results2[1];
        DefaultTreeModel m = (DefaultTreeModel)lstSearchResults.getModel();
        DefaultMutableTreeNode name;
        int dbID = camiDAO.getDogBreedID(dogBreed);
        appt = camiDAO.findAppointment(apptID);
        int dogID = appt.getDogID();
        int empID = appt.getEmpID();
        Dog dog = camiDAO.displayDog(dogID);
        int custID = dog.getCustID();
        Employee emp = camiDAO.findEmployee(empID);
        Pricing price = camiDAO.findPrice(dbID);
        Customer cust = camiDAO.findCustomerByID(custID);
        String lName = cust.getLastName();
        String fName = cust.getFirstName();
        double pr = price.getPrice();
        String Price = DecimalFormat.getCurrencyInstance().format(pr);
        String custName = (lName + ", " + fName);
        name = new DefaultMutableTreeNode(custName);
        ArrayList<Dog> dogs = (ArrayList<Dog>)camiDAO.findDog(cust.getCustID());
         dogs.stream().forEach((specificItem) -> {
            name.add(new DefaultMutableTreeNode(specificItem.getDogName()));
            });
        m.setRoot(name);
        
        String customerID = Integer.toString(custID);
        txtCustID.setText(customerID);
        txtCustLastName.setText(cust.getLastName());
        txtCustFirstName.setText(cust.getFirstName());
        txtCustAddress.setText(cust.getAddress());
        txtApartmentNum.setText(cust.getApartment());
        txtCity.setText(cust.getCity());
        txtState.setText(cust.getState());
        int zip = cust.getZip();
        String z = Integer.toString(zip);
        txtZip.setText(z);
        txtCustPhone.setText(cust.getPhone());
        cmbCustID.setSelectedItem(custID);
        lblSucessFail.setText("");
        cmbDogID.setSelectedItem(dogID);
        txtCustDogName.setText(dogName);
        jdcBDay.setCalendar(dog.getBDay());
        jdcRabExp.setCalendar(dog.getRabExp());
        txtAinstructions.setText(dog.getInstructions());
        String apptnum = Integer.toString(apptID);
        lblApptID.setText(apptnum);
        lblGroomer.setText(emp.getFirstName());
        lblOwnerFirstName.setText(cust.getFirstName());
        lblOwnerLastName.setText(cust.getLastName());
        lblDogName.setText(dogName);
        lblApptDogBreed.setText(dogBreed);
        lblGroomPrice.setText(Price);
    }
    public static void clearApptFields()
    {
        //method to clear appointment fields after deleting an appointment
       lblApptID.setText("");
       lblGroomer.setText("");
       lblOwnerFirstName.setText("");
       lblOwnerLastName.setText("");
       lblDogName.setText("");
       lblApptDogBreed.setText("");
       lblGroomPrice.setText("");
       
    }
   

    /**
     * @param args the command line arguments
     */
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelAppt;
    private javax.swing.JButton btnCheckIn;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnCustInfoSave;
    private javax.swing.JButton btnDelCust;
    private javax.swing.JButton btnDelDog;
    private javax.swing.JButton btnDogSave;
    private javax.swing.JButton btnNewCustomer;
    private javax.swing.JButton btnNewDog;
    private javax.swing.JButton btnReschedule;
    private javax.swing.JButton btnSearch;
    private javax.swing.JCheckBox cbCustBanned;
    private javax.swing.JCheckBox cbDogBanned;
    private javax.swing.JComboBox<Integer> cmbCustID;
    private javax.swing.JComboBox<String> cmbDogBreed;
    public static javax.swing.JComboBox<Integer> cmbDogID;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private com.toedter.calendar.JDateChooser jdcApptDate;
    private com.toedter.calendar.JDateChooser jdcBDay;
    private com.toedter.calendar.JDateChooser jdcRabExp;
    private javax.swing.JMenuItem jmiSettings;
    private javax.swing.JLabel lblApartmentNum;
    public static javax.swing.JLabel lblApptDogBreed;
    public static javax.swing.JLabel lblApptID;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCustAddress;
    private javax.swing.JLabel lblCustDogName;
    private javax.swing.JLabel lblCustFirstName;
    private javax.swing.JLabel lblCustID;
    private javax.swing.JLabel lblCustLastName;
    private javax.swing.JLabel lblCustPhone;
    private javax.swing.JLabel lblDogBDay;
    private javax.swing.JLabel lblDogBreed;
    private javax.swing.JLabel lblDogCustID;
    private javax.swing.JLabel lblDogID;
    public static javax.swing.JLabel lblDogName;
    public static javax.swing.JLabel lblGroomPrice;
    public static javax.swing.JLabel lblGroomer;
    private javax.swing.JLabel lblInstructions;
    private javax.swing.JLabel lblLogo;
    public static javax.swing.JLabel lblOwnerFirstName;
    public static javax.swing.JLabel lblOwnerLastName;
    private javax.swing.JLabel lblPhone;
    private javax.swing.JLabel lblRabExp;
    private javax.swing.JLabel lblState;
    private javax.swing.JLabel lblSucessFail;
    private javax.swing.JLabel lblZip;
    private javax.swing.JTree lstSearchResults;
    private javax.swing.JMenu menuAdmin;
    private javax.swing.JMenuItem mnuCommReport;
    private javax.swing.JMenuItem mnuSalesReport;
    private javax.swing.JPanel pnlAppointments;
    private javax.swing.JPanel pnlCustInfo;
    private javax.swing.JPanel pnlDogInfo;
    private javax.swing.JTabbedPane tabPane;
    private javax.swing.JTable tblAppointments;
    private javax.swing.JTextArea txtAinstructions;
    private javax.swing.JTextField txtApartmentNum;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtCustAddress;
    public javax.swing.JTextField txtCustDogName;
    private javax.swing.JTextField txtCustFirstName;
    private javax.swing.JLabel txtCustID;
    private javax.swing.JTextField txtCustLastName;
    private javax.swing.JFormattedTextField txtCustPhone;
    private javax.swing.JFormattedTextField txtPhone;
    private javax.swing.JFormattedTextField txtState;
    private javax.swing.JTextField txtZip;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
